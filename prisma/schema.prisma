datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Articles {
  id           String          @id @default(cuid())
  articleId    Int             @unique
  createdAt    DateTime
  articleTitle String
  articleLink  String
  votes        ArticlesVotes[]
}

model ArticlesVotes {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  articleId String
  article   Articles @relation(fields: [articleId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductHunt {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
}

model Team {
  id              String       @id @default(cuid())
  name            String
  slug            String?      @unique
  score           Int?
  bonus           Int?
  ownerId         String       @unique
  owner           User         @relation(name: "owner", fields: [ownerId], references: [id])
  users           User[]
  actionLogs      ActionLogs[] @relation("team")
  prs             String?
  githubTeamId    Int?
  allowAutoAssign Boolean
  disqualified    Boolean      @default(false)

  @@index([slug])
  @@index([disqualified])
}

enum ActionType {
  KICK_USER
  //
  DELTE_PR
  RECOVER_PR
  //
  DISQUALIFY_USER
  RECOVER_USER
  //
  DISQUALITY_TEAM
  RECOVER_TEAM
}

model ActionLogs {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  // action type i.e. if is for PR or for user or team
  actionType ActionType
  // id of the PR
  pr         String?
  prDetails  String?
  // details of user on which action was taken
  user       User?      @relation("affectedUser", fields: [userId], references: [id])
  userId     String?
  // details of team
  team       Team?      @relation("team", fields: [teamId], references: [id])
  teamId     String?
  // details of user who took the action
  admin      User       @relation("admin", fields: [adminId], references: [id])
  adminId    String

  @@index([pr])
  @@index([prDetails])
  @@index([actionType])
  @@index([createdAt])
  @@index([teamId])
  @@index([adminId])
  @@index([userId])
}

model Report {
  pr     String @unique
  status Status

  @@index([status])
}

model Social {
  createdAt    DateTime    @default(now())
  id           String      @id @default(cuid())
  type         SocialMedia
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  accessToken  String
  refreshToken String
}

model User {
  createdAt       DateTime        @default(now())
  id              String          @id @default(cuid())
  ticketId        Int             @default(autoincrement())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  login           String?         @unique @map("github_handle")
  colorSchema     String?         @default("1")
  image           String?
  score           Int             @default(0)
  bonus           Int             @default(0)
  moderator       Boolean         @default(false)
  cleaner         Boolean         @default(false)
  handle          String?
  teamId          String?
  inviteId        String?
  disqualified    Boolean         @default(false)
  teamOwner       Team?           @relation("owner")
  team            Team?           @relation(fields: [teamId], references: [id])
  invite          User?           @relation("user", fields: [inviteId], references: [id])
  invited         User[]          @relation("user")
  githubUserId    Int?
  accounts        Account[]
  sessions        Session[]
  social          Social[]
  userActionLogs  ActionLogs[]    @relation("affectedUser")
  adminActionLogs ActionLogs[]    @relation("admin")
  productHunters  ProductHunt[]
  starsGiven      StarsGiven[]
  forksGiven      ForkGiven[]
  winners         Winners[]
  votes           ArticlesVotes[]
}

model StarsGiven {
  id        String   @id @default(cuid())
  userId    String
  library   String
  user      User @relation(fields: [userId], references: [id])
  @@unique([userId, library])
}

model ForkGiven {
  id        String   @id @default(cuid())
  userId    String
  library   String
  user      User @relation(fields: [userId], references: [id])
  @@unique([userId, library])
}

model Winners {
  id            String     @id @default(cuid())
  month         Int
  year          Int
  userId        String
  lastDateClaim DateTime
  type          String
  user          User       @relation(fields: [userId], references: [id])
  claimed       DateTime?

  @@unique([month, year, userId, type])
  @@index([month])
  @@index([year])
  @@index([userId])
  @@index([claimed])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SocialMedia {
  TWITTER
  DEVTO
}

enum Status {
  REPORT
  DELETED
}


model Repositories {
    id            String    @id @default(cuid())
    date          DateTime
    status        RepositoryStatus
    url           String
    @@index([url])
    @@unique([url])
}

enum RepositoryStatus {
   NOT_DETERMINED
   ACCEPTED
   DENIED
   BANNED
}