datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id              String    @id @default(cuid())
  name            String
  slug            String? @unique
  score           Int?
  ownerId         String @unique
  owner           User @relation(name: "owner", fields: [ownerId], references: [id])
  users           User[]
  prs             String?
  githubTeamId    Int?
  allowAutoAssign Boolean
  disqualified    Boolean @default(false)

  @@index([slug])
  @@index([disqualified])
}

model Report {
  pr              String @unique
  status          Status

  @@index([status])
}

model Social {
  createdAt     DateTime  @default(now())
  id            String    @id @default(cuid())
  type          SocialMedia
  userId        String
  user          User @relation(fields: [userId], references: [id])
  accessToken   String
  refreshToken  String
}

model User {
  createdAt     DateTime  @default(now())
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  moderator     Boolean @default(false)
  handle        String?
  teamId        String?
  disqualified  Boolean @default(false)
  teamOwner     Team?   @relation("owner")
  team          Team?   @relation(fields: [teamId], references: [id])
  githubUserId  Int?
  accounts      Account[]
  sessions      Session[]
  social        Social[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
enum SocialMedia {
    TWITTER
}

enum Status {
    REPORT
    DELETED
}